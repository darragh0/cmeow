from argparse import Namespace
from pathlib import Path

from cmeow.util import BuildType, Constant, run_cmd, yn_input


def _dir_empty(path: Path) -> bool:
    return not any(path.iterdir())


def resolve_new_fail(args: Namespace) -> None:
    # FIXME:
    # Don't `rm -rf` if other files exist or if not created by cmeow.

    proj_dir = args.path / args.project
    if not proj_dir.exists():
        return

    if yn_input("<ylw>*[undo?]*</ylw> remove project? (y/n): ", indent=2):
        run_cmd(f"rm -rf {proj_dir}", bg=False, verbose=False, spinner=False)


def resolve_init_fail() -> None:  # noqa: C901
    proj_dir = Path.cwd()

    if not yn_input("<ylw>*[undo?]*</ylw> remove project files? (y/n): ", indent=2):
        return

    cmake_build_dir = proj_dir / Constant.target_dir / BuildType.DEBUG / Constant.cmake_build_dir

    req_files = (
        *(cmake_build_dir / p for p in Constant.cmake_build_files),
        *(proj_dir / p for p in Constant.cmake_base_files),
    )

    req_dirs = (cmake_build_dir / p for p in Constant.cmake_build_dirs)

    for file in req_files:
        file.unlink(missing_ok=True)

    for _dir in req_dirs:
        if _dir.exists() and _dir_empty(_dir):
            _dir.rmdir()

    (proj_dir / Constant.project_file).unlink(missing_ok=True)

    src_dir = proj_dir / Constant.src_dir
    target_dir = proj_dir / Constant.target_dir

    src_main = proj_dir / Constant.src_dir / Constant.main_src_file

    # FIXME:
    # This is a very shitty way of checking if we made this file.
    # Ideally, we would have hashes of the files stored somewhere to ensure
    # they were generated by cmeow.

    if src_main.exists():
        try:
            txt = src_main.read_text(encoding="utf-8")
        except OSError:
            pass
        else:
            if txt == Constant.main_src_file_str:
                src_main.unlink(missing_ok=True)

    for _dir in (target_dir, src_dir):
        if _dir.exists() and _dir_empty(_dir):
            _dir.rmdir()
